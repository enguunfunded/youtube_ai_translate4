import os
import torch
import numpy as np
import soundfile as sf
from bark import generate_audio, preload_models
from numpy.core.multiarray import scalar  # ‚úÖ whitelist-–¥ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π

# Torch model cache –±–∞–π—Ä–ª–∞–ª
os.environ["XDG_CACHE_HOME"] = "./bark_model"
os.environ["HF_HOME"] = "./bark_model"
os.environ["TORCH_HOME"] = "./bark_model"
os.environ["SUNO_USE_SMALL_MODELS"] = "1"  # üü¢ bark-small –∞—à–∏–≥–ª–∞—Ö

# Torch pickle whitelist —Ç–æ—Ö–∏—Ä—É—É–ª–≥–∞
try:
    torch.serialization.add_safe_globals({'numpy.core.multiarray.scalar': scalar})
except Exception as e:
    print("‚ö†Ô∏è Torch whitelist —Ç–æ—Ö–∏—Ä–≥–æ–æ –∞–º–∂–∏–ª—Ç–≥“Ø–π:", e)

# –ó–∞–≥–≤–∞—Ä—É—É–¥—ã–≥ –∞—á–∞–∞–ª–∞—Ö
preload_models()

# –û—Ä—á—É—É–ª—Å–∞–Ω —Ç–µ–∫—Å—Ç —É–Ω—à–∏—Ö
with open("temp/translated.txt", "r", encoding="utf-8") as f:
    text = f.read().strip()  # üßΩ —Ö–æ–æ—Å–æ–Ω –º”©—Ä“Ø“Ø–¥ —Ü—ç–≤—ç—Ä–ª—ç–Ω—ç

# –î—É—É “Ø“Ø—Å–≥—ç—Ö
audio_array = generate_audio(text)

# WAV —Ñ–∞–π–ª —Ö–∞–¥–≥–∞–ª–∞—Ö
sf.write("temp/voice_bark.wav", audio_array, 24000)
print("‚úÖ voice_bark.wav —Ñ–∞–π–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç.")
